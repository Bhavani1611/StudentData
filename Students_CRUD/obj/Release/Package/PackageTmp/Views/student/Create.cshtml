@model Students_CRUD.Models.mst_student

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>mst_student</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Student_key, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Student_key, new { htmlAttributes = new {@type ="number", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Student_key, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Student_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Student_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Student_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject_key, "Subject_key", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Subject_key", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Subject_key, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.grade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.grade, new { htmlAttributes = new { @type = "number", @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.grade, "", new { @class = "text-danger" })*@
                <input type="number" id="marks" placeholder="enter marks(0-100)" onblur="calculateresult()">
                <br>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control", @onblur ="calculateresult()" }})
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    function calculateresult() {
        
        var Remarks = grade > 60 ? "Pass" : "Fail";
        remarksInput.value = Remarks;
        if (grade > 59) {
            remarksInput.value = "Pass";
        }
        else {
            remarksInput.value = "fail";
        }
        var remarksInput = document.getElementById("Remarks");
    }
           
</script>

@*<script>

    function calculateresult() {*@
        @*//var Remarks = grade > 60 ? "Pass" : "Fail";
        //var remarksInput = document.getElementById("Remarks"); 
        //remarksInput.value = Remarks;
        //if (grade > 59) {
        //    remarksInput.value = "Pass";
        //}
        //else {
        //    remarksInput.value = "fail";
        //}*@
        c@*onst grade = document.getElementById("grade").value;
        const number = parseint(grade, 3);
        const result = number >= 60;
        const remarksInput = document.getElementById("Remarks");
        remarksInput.value = result ? "Pass" : "Fail";
    }
    document.getElementById("grade").addEventListener("keyup", calculateresult);
</script>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
